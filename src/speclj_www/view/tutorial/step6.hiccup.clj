[:h3 [:a {:name "ch8"} "Decoupling Tests"]]
[:p "So now we have a way to get user input, we need to validate that input. If we add the following test from <a href=\"#f9\">Figure 9</a> and function from <a href=\"#f10\">Figure 10</a>, we will have that functionality."]

[:h5 [:a {:name "f9"} "Figure 9"]]
[:p "<pre class=\"textmate-source twilight\"><span class=\"source source_clojure\"><span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">it</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>gets a valid number<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"meta meta_function meta_function_let_form meta_function_let_form_clojure\"><span class=\"keyword keyword_control keyword_control_clojure\">with-redefs <span class=\"meta meta_structure meta_structure_bindings meta_structure_bindings_clojure\">[<span class=\"meta meta_structure meta_structure_binding meta_structure_binding_symbole meta_structure_binding_symbole_clojure\"><span class=\"variable variable_parameter variable_parameter_clojure\"><span class=\"source source_symbol source_symbol_clojure\">prompt</span></span> <span class=\"meta meta_structure meta_structure_binding_exp meta_structure_binding_exp_sexp meta_structure_binding_exp_sexp_clojure\"><span class=\"meta meta_function meta_function_lambda meta_function_lambda_clojure\">(<span class=\"storage storage_type storage_type_function storage_type_function_type storage_type_function_type_clojure\">fn</span> <span class=\"meta meta_function meta_function_body meta_function_body_clojure\"><span class=\"meta meta_function meta_function_parameters meta_function_parameters_vector meta_function_parameters_vector_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_begin punctuation_definition_vector_begin_clojure\">[</span><span class=\"keyword keyword_operator keyword_operator_varargs keyword_operator_varargs_clojure\">&amp;</span> <span class=\"variable variable_parameter variable_parameter_clojure\"><span class=\"source source_symbol source_symbol_clojure\">_</span></span><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_end punctuation_definition_vector_end_clojure\">]</span></span><span class=\"meta meta_function meta_function_body meta_function_body_code meta_function_body_code_clojure\"> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>11<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span></span></span>)</span></span></span>]
      <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">should-not-throw</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">get-coin-amount</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>quarters<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>)</span>
      <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">should<span class=\"keyword keyword_other keyword_other_mark keyword_other_mark_clojure\">=</span></span> <span class=\"constant constant_numeric constant_numeric_float constant_numeric_float_clojure\">11</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">get-coin-amount</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>pennies<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>)</span>
      <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">should-not<span class=\"keyword keyword_other keyword_other_mark keyword_other_mark_clojure\">=</span></span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>11<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">get-coin-amount</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>dimes<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>)</span>
      <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"keyword keyword_control keyword_control_clojure\">if</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"support support_function support_function_clojure\">not<span class=\"keyword keyword_other keyword_other_mark keyword_other_mark_clojure\">=</span></span> <span class=\"constant constant_numeric constant_numeric_float constant_numeric_float_clojure\">11</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">get-coin-amount</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>quarters<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>)</span>
        <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">should-fail</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>issues getting the correct coin amount<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>)</span></span></span>)</span>
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"meta meta_function meta_function_let_form meta_function_let_form_clojure\"><span class=\"keyword keyword_control keyword_control_clojure\">with-redefs <span class=\"meta meta_structure meta_structure_bindings meta_structure_bindings_clojure\">[<span class=\"meta meta_structure meta_structure_binding meta_structure_binding_symbole meta_structure_binding_symbole_clojure\"><span class=\"variable variable_parameter variable_parameter_clojure\"><span class=\"source source_symbol source_symbol_clojure\">prompt</span></span> <span class=\"meta meta_structure meta_structure_binding_exp meta_structure_binding_exp_sexp meta_structure_binding_exp_sexp_clojure\"><span class=\"meta meta_function meta_function_lambda meta_function_lambda_clojure\">(<span class=\"storage storage_type storage_type_function storage_type_function_type storage_type_function_type_clojure\">fn</span> <span class=\"meta meta_function meta_function_body meta_function_body_clojure\"><span class=\"meta meta_function meta_function_parameters meta_function_parameters_vector meta_function_parameters_vector_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_begin punctuation_definition_vector_begin_clojure\">[</span><span class=\"keyword keyword_operator keyword_operator_varargs keyword_operator_varargs_clojure\">&amp;</span> <span class=\"variable variable_parameter variable_parameter_clojure\"><span class=\"source source_symbol source_symbol_clojure\">_</span></span><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_end punctuation_definition_vector_end_clojure\">]</span></span><span class=\"meta meta_function meta_function_body meta_function_body_code meta_function_body_code_clojure\"> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>$5<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span></span></span>)</span></span></span>]
      <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">should-throw</span> <span class=\"source source_symbol source_symbol_clojure\">Error</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>Not a valid amount<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>
        <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">get-coin-amount</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>silver dollars<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>)</span></span></span>)</span>)</span></span></pre>"]

[:h5 [:a {:name "f10"} "Figure 10"]]
[:p "<pre class=\"textmate-source twilight\"><span class=\"source source_clojure\"><span class=\"meta meta_function meta_function_clojure\">(<span class=\"storage storage_type storage_type_function storage_type_function_type storage_type_function_type_clojure\">defn</span> <span class=\"entity entity_name entity_name_function entity_name_function_clojure\"><span class=\"source source_symbol source_symbol_clojure\">get-coin-amount</span></span> <span class=\"meta meta_function meta_function_body meta_function_body_clojure\"><span class=\"meta meta_function meta_function_parameters meta_function_parameters_vector meta_function_parameters_vector_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_begin punctuation_definition_vector_begin_clojure\">[</span><span class=\"variable variable_parameter variable_parameter_clojure\"><span class=\"source source_symbol source_symbol_clojure\">coin-type</span></span><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_end punctuation_definition_vector_end_clojure\">]</span></span><span class=\"meta meta_function meta_function_body meta_function_body_code meta_function_body_code_clojure\">
  <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"meta meta_function meta_function_let_form meta_function_let_form_clojure\"><span class=\"keyword keyword_control keyword_control_clojure\">let</span> <span class=\"meta meta_structure meta_structure_bindings meta_structure_bindings_clojure\">[<span class=\"meta meta_structure meta_structure_binding meta_structure_binding_symbole meta_structure_binding_symbole_clojure\"><span class=\"variable variable_parameter variable_parameter_clojure\"><span class=\"source source_symbol source_symbol_clojure\">coin-amount</span></span> 
         <span class=\"meta meta_structure meta_structure_binding_exp meta_structure_binding_exp_sexp meta_structure_binding_exp_sexp_clojure\"><span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">prompt</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"storage storage_clojure\">str</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>How many <span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span> <span class=\"source source_symbol source_symbol_clojure\">coin-type</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span> do you have?<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>)</span></span></span>]
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"keyword keyword_control keyword_control_clojure\">try</span>
      <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">Integer</span><span class=\"keyword keyword_operator keyword_operator_qualified keyword_operator_qualified_clojure\">/</span><span class=\"source source_symbol source_symbol_clojure\">parseInt</span> <span class=\"source source_symbol source_symbol_clojure\">coin-amount</span>)</span>
      <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"meta meta_function meta_function_catch_form meta_function_catch_form_clojure\"><span class=\"keyword keyword_control keyword_control_clojure\">catch</span> <span class=\"entity entity_other entity_other_inherited-class entity_other_inherited-class_java entity_other_inherited-class_java_clojure\"><span class=\"source source_symbol source_symbol_clojure\">Exception</span></span><span class=\"variable variable_parameter variable_parameter_clojure\"> <span class=\"source source_symbol source_symbol_clojure\">e</span></span>
        <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"keyword keyword_control keyword_control_clojure\">throw</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"meta meta_function meta_function_new_form meta_function_new_form_clojure\"><span class=\"storage storage_type storage_type_java storage_type_java_clojure\"><span class=\"source source_symbol source_symbol_clojure\">Error</span>.</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>Not a valid amount<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span></span>)</span>)</span></span>)</span>)</span></span></span>)</span></span></span>)</span></span></pre>"]

[:p "This code might look a little bit more confusing to you than our last example. Our new function uses our prompt function to get a number representing the amount of coins the user has. They type of coin is supplied in the arguments. If the user gives us invalid input, we throw an error saying that it is not a valid amount."]

[:p "You might be asking yourself, won't our tests fail if something is wrong with the prompt method? Since this test is about the function get-coin-amount and our function depends on the prompt function, we need a way to ensure that the prompt function will return what we need it to. We can accomplish this by binding a new value to the prompt keyword (within the scope of our test). This is being done with the binding method. As you can see, for the first 4 assertions prompt will return the string value of 11, then for the last assertion it will return the string value of $5."]

[:h3 [:a {:name "ch9"} "Testing for Exceptions"]]
[:p "Won't the string value of $5 make get-coin-amount throw an error? Yes, and we can test that it should do that by using Speclj's should-throw component. On the flipside, when prompt returns a string value that can be parsed into an int without tripping the catch method, we can use the should-not-throw to test for an error and exception free execution of our method."]

[:p "The should=, should-not=, and should-fail assertions are all testing the same thing. We included them just to show how they can be used. The should= passes if the first argument equals the result of the second argument. On the other hand, the should-not= passes if the first argument doesn't equal the result of its second argument. Then finally, the should-fail fails the test and prints it's error message if it gets evaluated."]
[:span {:id "lesson_nav"} [:a {:href "/tutorial/step5#ch7"} "<-- Automated Testing"] "&nbsp;&nbsp;|&nbsp;&nbsp;" [:a {:href "/tutorial/step7"} "Reference-able Symbols -->"]]
