[:h3 [:a {:name "ch10"} "Testing Long Decimal Values with Simple Formatting"]]
[:p "Now that we have functions that can get valid user input for all types of coins, we can call them once for each coin type and add their result. Then we can make another function that converts that total into dollars. <a href=\"#f11\">Figure 11</a> and <a href=\"#f12\">Figure 12</a> represent the additional tests and functions that we need to add to make this happen."]

[:h5 [:a {:name "f11"} "Figure 11"]]
[:p "<pre class=\"textmate-source twilight\"><span class=\"source source_clojure\"><span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">it</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>returns how much money you have in pennies<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>
  <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"meta meta_function meta_function_let_form meta_function_let_form_clojure\"><span class=\"keyword keyword_control keyword_control_clojure\">binding</span> <span class=\"meta meta_structure meta_structure_bindings meta_structure_bindings_clojure\">[<span class=\"meta meta_structure meta_structure_binding meta_structure_binding_symbole meta_structure_binding_symbole_clojure\"><span class=\"variable variable_parameter variable_parameter_clojure\"><span class=\"source source_symbol source_symbol_clojure\">get-coin-amount</span></span> <span class=\"meta meta_structure meta_structure_binding_exp meta_structure_binding_exp_sexp meta_structure_binding_exp_sexp_clojure\"><span class=\"meta meta_function meta_function_lambda meta_function_lambda_clojure\">(<span class=\"storage storage_type storage_type_function storage_type_function_type storage_type_function_type_clojure\">fn</span> <span class=\"meta meta_function meta_function_body meta_function_body_clojure\"><span class=\"meta meta_function meta_function_parameters meta_function_parameters_vector meta_function_parameters_vector_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_begin punctuation_definition_vector_begin_clojure\">[</span><span class=\"keyword keyword_operator keyword_operator_varargs keyword_operator_varargs_clojure\">&amp;</span> <span class=\"variable variable_parameter variable_parameter_clojure\"><span class=\"source source_symbol source_symbol_clojure\">_</span></span><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_end punctuation_definition_vector_end_clojure\">]</span></span><span class=\"meta meta_function meta_function_body meta_function_body_code meta_function_body_code_clojure\"> <span class=\"constant constant_numeric constant_numeric_float constant_numeric_float_clojure\">2</span></span></span>)</span></span></span>]
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">should<span class=\"keyword keyword_other keyword_other_mark keyword_other_mark_clojure\">=</span></span> <span class=\"constant constant_numeric constant_numeric_float constant_numeric_float_clojure\">382</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">count-change</span>)</span>)</span></span></span>)</span>)</span>

<span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">with</span> <span class=\"source source_symbol source_symbol_clojure\">dollar-format</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"meta meta_function meta_function_new_form meta_function_new_form_clojure\"><span class=\"storage storage_type storage_type_java storage_type_java_clojure\"><span class=\"source source_symbol source_symbol_clojure\">java</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">text</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">DecimalFormat</span>.</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>$0.00<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span></span>)</span>)</span>

<span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">it</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>converts your change into dollars<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>
  <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">should<span class=\"keyword keyword_other keyword_other_mark keyword_other_mark_clojure\">=</span></span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>$11.34<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(.<span class=\"support support_function support_function_clojure\">format</span> <span class=\"storage storage_type storage_type_function storage_type_function_type storage_type_function_type_clojure\">@</span><span class=\"source source_symbol source_symbol_clojure\">dollar-format</span>
      <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">convert-to-dollars</span> <span class=\"constant constant_numeric constant_numeric_float constant_numeric_float_clojure\">1134.25634456463</span>)</span>)</span>)</span>)</span></span></pre>"]

[:h5 [:a {:name "f12"} "Figure 12"]]
[:p "<pre class=\"textmate-source twilight\"><span class=\"source source_clojure\"><span class=\"meta meta_function meta_function_clojure\">(<span class=\"storage storage_type storage_type_function storage_type_function_type storage_type_function_type_clojure\">defn</span> <span class=\"entity entity_name entity_name_function entity_name_function_clojure\"><span class=\"source source_symbol source_symbol_clojure\">count-change</span></span> <span class=\"meta meta_function meta_function_body meta_function_body_clojure\"><span class=\"meta meta_function meta_function_parameters meta_function_parameters_vector meta_function_parameters_vector_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_begin punctuation_definition_vector_begin_clojure\">[</span><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_end punctuation_definition_vector_end_clojure\">]</span></span><span class=\"meta meta_function meta_function_body meta_function_body_code meta_function_body_code_clojure\">
  <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"keyword keyword_operator keyword_operator_clojure\">+</span>
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">get-coin-amount</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>pennies<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"keyword keyword_operator keyword_operator_clojure\">*</span> <span class=\"constant constant_numeric constant_numeric_float constant_numeric_float_clojure\">5</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">get-coin-amount</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>nickels<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>)</span>
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"keyword keyword_operator keyword_operator_clojure\">*</span> <span class=\"constant constant_numeric constant_numeric_float constant_numeric_float_clojure\">10</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">get-coin-amount</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>dimes<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>)</span>
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"keyword keyword_operator keyword_operator_clojure\">*</span> <span class=\"constant constant_numeric constant_numeric_float constant_numeric_float_clojure\">25</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">get-coin-amount</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>quarters<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>)</span>
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"keyword keyword_operator keyword_operator_clojure\">*</span> <span class=\"constant constant_numeric constant_numeric_float constant_numeric_float_clojure\">50</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">get-coin-amount</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>half dollars<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>)</span>
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"keyword keyword_operator keyword_operator_clojure\">*</span> <span class=\"constant constant_numeric constant_numeric_float constant_numeric_float_clojure\">100</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">get-coin-amount</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>silver dollars<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>)</span>)</span></span></span>)</span>

<span class=\"meta meta_function meta_function_clojure\">(<span class=\"storage storage_type storage_type_function storage_type_function_type storage_type_function_type_clojure\">defn</span> <span class=\"entity entity_name entity_name_function entity_name_function_clojure\"><span class=\"source source_symbol source_symbol_clojure\">convert-to-dollars</span></span> <span class=\"meta meta_function meta_function_body meta_function_body_clojure\"><span class=\"meta meta_function meta_function_parameters meta_function_parameters_vector meta_function_parameters_vector_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_begin punctuation_definition_vector_begin_clojure\">[</span><span class=\"variable variable_parameter variable_parameter_clojure\"><span class=\"source source_symbol source_symbol_clojure\">cents</span></span><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_end punctuation_definition_vector_end_clojure\">]</span></span><span class=\"meta meta_function meta_function_body meta_function_body_code meta_function_body_code_clojure\">
  <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"keyword keyword_operator keyword_operator_clojure\">/</span> <span class=\"source source_symbol source_symbol_clojure\">cents</span> <span class=\"constant constant_numeric constant_numeric_float constant_numeric_float_clojure\">100</span>)</span></span></span>)</span></span></pre>"]

[:p "Our test for the count-change method doesn't introduce any new concepts. But to review, it binds all calls to get-coin-amount to the value of 2. So when our count-change method makes the calls to get-coin-amount for pennies, nickels, dimes, etc it gets a return value of 2 coins. Then we test that we should get a value of 382 given our inputs of 2 of each coin."]

[:p "The next test uses a symbol called dollar-format which is declared using Speclj's with component. The with component declares a reference-able symbol that we can use later within the scope of our describe component. So when we are running our test we format the output of convert-to-dollars method into an easily testable value of $11.34."]

[:p "And that's it. Our application meets all of the requirements we set for the application. <a href=\"#f13\">Figure 13</a> and <a href=\"#f14\">Figure 14</a> represent what the final project should look like."]

[:h5 [:a {:name "f13"} "Figure 13"]]
[:p "<pre class=\"textmate-source twilight\"><span class=\"source source_clojure\"><span class=\"meta meta_function meta_function_namespace meta_function_namespace_clojure\">(<span class=\"support support_function support_function_namespace support_function_namespace_clojure\">ns</span> <span class=\"entity entity_name entity_name_namespace entity_name_namespace_clojure\"><span class=\"source source_symbol source_symbol_clojure\">change-counter</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">core-spec</span></span>
  (<span class=\"source source_symbol source_symbol_clojure\">use</span> [<span class=\"source source_symbol source_symbol_clojure\">speclj</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">core</span>] [<span class=\"source source_symbol source_symbol_clojure\">change-counter</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">core</span>]))</span>
  
<span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">describe</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>change-counter.core<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>
  <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">around</span> <span class=\"meta meta_expression meta_expression_vector meta_expression_vector_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_begin punctuation_definition_vector_begin_clojure\">[</span><span class=\"source source_symbol source_symbol_clojure\">it</span><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_end punctuation_definition_vector_end_clojure\">]</span></span>
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"support support_function support_function_match support_function_match_clojure\">with-out-str</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">it</span>)</span>)</span>)</span>
  
  <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">it</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>tests the input of prompt<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">should<span class=\"keyword keyword_other keyword_other_mark keyword_other_mark_clojure\">=</span></span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>13<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span> 
      <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"support support_function support_function_match support_function_match_clojure\">with-in-str</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>13<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>
        <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">prompt</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>Enter amount of pennies<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>)</span>)</span>)</span>
  
  <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">it</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>tests the output of prompt<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">should<span class=\"keyword keyword_other keyword_other_mark keyword_other_mark_clojure\">=</span></span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>Where is my money?<span class=\"constant constant_character constant_character_escape constant_character_escape_clojure\">\\</span>n<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>
      <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"support support_function support_function_match support_function_match_clojure\">with-out-str</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"support support_function support_function_match support_function_match_clojure\">with-in-str</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>10<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>
        <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">prompt</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>Where is my money?<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>)</span>)</span>)</span>)</span>
  
  <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">it</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>gets a valid number<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"meta meta_function meta_function_let_form meta_function_let_form_clojure\"><span class=\"keyword keyword_control keyword_control_clojure\">binding</span> <span class=\"meta meta_structure meta_structure_bindings meta_structure_bindings_clojure\">[<span class=\"meta meta_structure meta_structure_binding meta_structure_binding_symbole meta_structure_binding_symbole_clojure\"><span class=\"variable variable_parameter variable_parameter_clojure\"><span class=\"source source_symbol source_symbol_clojure\">prompt</span></span> <span class=\"meta meta_structure meta_structure_binding_exp meta_structure_binding_exp_sexp meta_structure_binding_exp_sexp_clojure\"><span class=\"meta meta_function meta_function_lambda meta_function_lambda_clojure\">(<span class=\"storage storage_type storage_type_function storage_type_function_type storage_type_function_type_clojure\">fn</span> <span class=\"meta meta_function meta_function_body meta_function_body_clojure\"><span class=\"meta meta_function meta_function_parameters meta_function_parameters_vector meta_function_parameters_vector_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_begin punctuation_definition_vector_begin_clojure\">[</span><span class=\"keyword keyword_operator keyword_operator_varargs keyword_operator_varargs_clojure\">&amp;</span> <span class=\"variable variable_parameter variable_parameter_clojure\"><span class=\"source source_symbol source_symbol_clojure\">_</span></span><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_end punctuation_definition_vector_end_clojure\">]</span></span><span class=\"meta meta_function meta_function_body meta_function_body_code meta_function_body_code_clojure\"> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>11<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span></span></span>)</span></span></span>]
      <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">should-not-throw</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">get-coin-amount</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>quarters<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>)</span>
      <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">should<span class=\"keyword keyword_other keyword_other_mark keyword_other_mark_clojure\">=</span></span> <span class=\"constant constant_numeric constant_numeric_float constant_numeric_float_clojure\">11</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">get-coin-amount</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>pennies<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>)</span>
      <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">should-not<span class=\"keyword keyword_other keyword_other_mark keyword_other_mark_clojure\">=</span></span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>11<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">get-coin-amount</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>dimes<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>)</span>
      <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"keyword keyword_control keyword_control_clojure\">if</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"support support_function support_function_clojure\">not<span class=\"keyword keyword_other keyword_other_mark keyword_other_mark_clojure\">=</span></span> <span class=\"constant constant_numeric constant_numeric_float constant_numeric_float_clojure\">11</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">get-coin-amount</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>quarters<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>)</span>
        <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">should-fail</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>issues getting the correct coin amount<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>)</span></span></span>)</span>
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"meta meta_function meta_function_let_form meta_function_let_form_clojure\"><span class=\"keyword keyword_control keyword_control_clojure\">binding</span> <span class=\"meta meta_structure meta_structure_bindings meta_structure_bindings_clojure\">[<span class=\"meta meta_structure meta_structure_binding meta_structure_binding_symbole meta_structure_binding_symbole_clojure\"><span class=\"variable variable_parameter variable_parameter_clojure\"><span class=\"source source_symbol source_symbol_clojure\">prompt</span></span> <span class=\"meta meta_structure meta_structure_binding_exp meta_structure_binding_exp_sexp meta_structure_binding_exp_sexp_clojure\"><span class=\"meta meta_function meta_function_lambda meta_function_lambda_clojure\">(<span class=\"storage storage_type storage_type_function storage_type_function_type storage_type_function_type_clojure\">fn</span> <span class=\"meta meta_function meta_function_body meta_function_body_clojure\"><span class=\"meta meta_function meta_function_parameters meta_function_parameters_vector meta_function_parameters_vector_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_begin punctuation_definition_vector_begin_clojure\">[</span><span class=\"keyword keyword_operator keyword_operator_varargs keyword_operator_varargs_clojure\">&amp;</span> <span class=\"variable variable_parameter variable_parameter_clojure\"><span class=\"source source_symbol source_symbol_clojure\">_</span></span><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_end punctuation_definition_vector_end_clojure\">]</span></span><span class=\"meta meta_function meta_function_body meta_function_body_code meta_function_body_code_clojure\"> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>$5<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span></span></span>)</span></span></span>]
      <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">should-throw</span> <span class=\"source source_symbol source_symbol_clojure\">Error</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>Not a valid amount<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>
        <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">get-coin-amount</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>silver dollars<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>)</span></span></span>)</span>)</span>
  
  <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">it</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>returns how much money you have in pennies<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"meta meta_function meta_function_let_form meta_function_let_form_clojure\"><span class=\"keyword keyword_control keyword_control_clojure\">binding</span> <span class=\"meta meta_structure meta_structure_bindings meta_structure_bindings_clojure\">[<span class=\"meta meta_structure meta_structure_binding meta_structure_binding_symbole meta_structure_binding_symbole_clojure\"><span class=\"variable variable_parameter variable_parameter_clojure\"><span class=\"source source_symbol source_symbol_clojure\">get-coin-amount</span></span> <span class=\"meta meta_structure meta_structure_binding_exp meta_structure_binding_exp_sexp meta_structure_binding_exp_sexp_clojure\"><span class=\"meta meta_function meta_function_lambda meta_function_lambda_clojure\">(<span class=\"storage storage_type storage_type_function storage_type_function_type storage_type_function_type_clojure\">fn</span> <span class=\"meta meta_function meta_function_body meta_function_body_clojure\"><span class=\"meta meta_function meta_function_parameters meta_function_parameters_vector meta_function_parameters_vector_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_begin punctuation_definition_vector_begin_clojure\">[</span><span class=\"keyword keyword_operator keyword_operator_varargs keyword_operator_varargs_clojure\">&amp;</span> <span class=\"variable variable_parameter variable_parameter_clojure\"><span class=\"source source_symbol source_symbol_clojure\">_</span></span><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_end punctuation_definition_vector_end_clojure\">]</span></span><span class=\"meta meta_function meta_function_body meta_function_body_code meta_function_body_code_clojure\"> <span class=\"constant constant_numeric constant_numeric_float constant_numeric_float_clojure\">2</span></span></span>)</span></span></span>]
      <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">should<span class=\"keyword keyword_other keyword_other_mark keyword_other_mark_clojure\">=</span></span> <span class=\"constant constant_numeric constant_numeric_float constant_numeric_float_clojure\">382</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">count-change</span>)</span>)</span></span></span>)</span>)</span>
  
  <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">with</span> <span class=\"source source_symbol source_symbol_clojure\">dollar-format</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"meta meta_function meta_function_new_form meta_function_new_form_clojure\"><span class=\"storage storage_type storage_type_java storage_type_java_clojure\"><span class=\"source source_symbol source_symbol_clojure\">java</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">text</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">DecimalFormat</span>.</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>$0.00<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span></span>)</span>)</span>
  
  <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">it</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>converts your change into dollars<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">should<span class=\"keyword keyword_other keyword_other_mark keyword_other_mark_clojure\">=</span></span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>$11.34<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>
      <span class=\"meta meta_sexpr meta_sexpr_clojure\">(.<span class=\"support support_function support_function_clojure\">format</span> <span class=\"storage storage_type storage_type_function storage_type_function_type storage_type_function_type_clojure\">@</span><span class=\"source source_symbol source_symbol_clojure\">dollar-format</span>
        <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">convert-to-dollars</span> <span class=\"constant constant_numeric constant_numeric_float constant_numeric_float_clojure\">1134.25634456463</span>)</span>)</span>)</span>)</span>
)</span>

<span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">run-specs</span>)</span></span></pre>"]

[:h5 [:a {:name "f14"} "Figure 14"]]
[:p "<pre class=\"textmate-source twilight\"><span class=\"source source_clojure\"><span class=\"meta meta_function meta_function_namespace meta_function_namespace_clojure\">(<span class=\"support support_function support_function_namespace support_function_namespace_clojure\">ns</span> <span class=\"entity entity_name entity_name_namespace entity_name_namespace_clojure\"><span class=\"source source_symbol source_symbol_clojure\">change-counter</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">core</span></span>)</span>

<span class=\"meta meta_function meta_function_clojure\">(<span class=\"storage storage_type storage_type_function storage_type_function_type storage_type_function_type_clojure\">defn</span> <span class=\"entity entity_name entity_name_function entity_name_function_clojure\"><span class=\"source source_symbol source_symbol_clojure\">prompt</span></span> <span class=\"meta meta_function meta_function_body meta_function_body_clojure\"><span class=\"meta meta_function meta_function_parameters meta_function_parameters_vector meta_function_parameters_vector_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_begin punctuation_definition_vector_begin_clojure\">[</span><span class=\"variable variable_parameter variable_parameter_clojure\"><span class=\"source source_symbol source_symbol_clojure\">message</span></span><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_end punctuation_definition_vector_end_clojure\">]</span></span><span class=\"meta meta_function meta_function_body meta_function_body_code meta_function_body_code_clojure\">
  <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"storage storage_clojure\">println</span> <span class=\"source source_symbol source_symbol_clojure\">message</span>)</span>
  <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"support support_function support_function_clojure\">read-line</span>)</span></span></span>)</span>
  
<span class=\"meta meta_function meta_function_clojure\">(<span class=\"storage storage_type storage_type_function storage_type_function_type storage_type_function_type_clojure\">defn</span> <span class=\"entity entity_name entity_name_function entity_name_function_clojure\"><span class=\"source source_symbol source_symbol_clojure\">get-coin-amount</span></span> <span class=\"meta meta_function meta_function_body meta_function_body_clojure\"><span class=\"meta meta_function meta_function_parameters meta_function_parameters_vector meta_function_parameters_vector_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_begin punctuation_definition_vector_begin_clojure\">[</span><span class=\"variable variable_parameter variable_parameter_clojure\"><span class=\"source source_symbol source_symbol_clojure\">coin-type</span></span><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_end punctuation_definition_vector_end_clojure\">]</span></span><span class=\"meta meta_function meta_function_body meta_function_body_code meta_function_body_code_clojure\">
  <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"meta meta_function meta_function_let_form meta_function_let_form_clojure\"><span class=\"keyword keyword_control keyword_control_clojure\">let</span> <span class=\"meta meta_structure meta_structure_bindings meta_structure_bindings_clojure\">[<span class=\"meta meta_structure meta_structure_binding meta_structure_binding_symbole meta_structure_binding_symbole_clojure\"><span class=\"variable variable_parameter variable_parameter_clojure\"><span class=\"source source_symbol source_symbol_clojure\">coin-amount</span></span>
         <span class=\"meta meta_structure meta_structure_binding_exp meta_structure_binding_exp_sexp meta_structure_binding_exp_sexp_clojure\"><span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">prompt</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"storage storage_clojure\">str</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>How many <span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span> <span class=\"source source_symbol source_symbol_clojure\">coin-type</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span> do you have?<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>)</span></span></span>]
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"keyword keyword_control keyword_control_clojure\">try</span>
      <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">Integer</span><span class=\"keyword keyword_operator keyword_operator_qualified keyword_operator_qualified_clojure\">/</span><span class=\"source source_symbol source_symbol_clojure\">parseInt</span> <span class=\"source source_symbol source_symbol_clojure\">coin-amount</span>)</span>
      <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"meta meta_function meta_function_catch_form meta_function_catch_form_clojure\"><span class=\"keyword keyword_control keyword_control_clojure\">catch</span> <span class=\"entity entity_other entity_other_inherited-class entity_other_inherited-class_java entity_other_inherited-class_java_clojure\"><span class=\"source source_symbol source_symbol_clojure\">Exception</span></span><span class=\"variable variable_parameter variable_parameter_clojure\"> <span class=\"source source_symbol source_symbol_clojure\">e</span></span>
        <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"keyword keyword_control keyword_control_clojure\">throw</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"meta meta_function meta_function_new_form meta_function_new_form_clojure\"><span class=\"storage storage_type storage_type_java storage_type_java_clojure\"><span class=\"source source_symbol source_symbol_clojure\">Error</span>.</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>Not a valid amount<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span></span>)</span>)</span></span>)</span>)</span></span></span>)</span></span></span>)</span>

<span class=\"meta meta_function meta_function_clojure\">(<span class=\"storage storage_type storage_type_function storage_type_function_type storage_type_function_type_clojure\">defn</span> <span class=\"entity entity_name entity_name_function entity_name_function_clojure\"><span class=\"source source_symbol source_symbol_clojure\">count-change</span></span> <span class=\"meta meta_function meta_function_body meta_function_body_clojure\"><span class=\"meta meta_function meta_function_parameters meta_function_parameters_vector meta_function_parameters_vector_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_begin punctuation_definition_vector_begin_clojure\">[</span><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_end punctuation_definition_vector_end_clojure\">]</span></span><span class=\"meta meta_function meta_function_body meta_function_body_code meta_function_body_code_clojure\">
  <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"keyword keyword_operator keyword_operator_clojure\">+</span>
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">get-coin-amount</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>pennies<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"keyword keyword_operator keyword_operator_clojure\">*</span> <span class=\"constant constant_numeric constant_numeric_float constant_numeric_float_clojure\">5</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">get-coin-amount</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>nickels<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>)</span>
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"keyword keyword_operator keyword_operator_clojure\">*</span> <span class=\"constant constant_numeric constant_numeric_float constant_numeric_float_clojure\">10</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">get-coin-amount</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>dimes<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>)</span>
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"keyword keyword_operator keyword_operator_clojure\">*</span> <span class=\"constant constant_numeric constant_numeric_float constant_numeric_float_clojure\">25</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">get-coin-amount</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>quarters<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>)</span>
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"keyword keyword_operator keyword_operator_clojure\">*</span> <span class=\"constant constant_numeric constant_numeric_float constant_numeric_float_clojure\">50</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">get-coin-amount</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>half dollars<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>)</span>
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"keyword keyword_operator keyword_operator_clojure\">*</span> <span class=\"constant constant_numeric constant_numeric_float constant_numeric_float_clojure\">100</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">get-coin-amount</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>silver dollars<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>)</span>)</span></span></span>)</span>

<span class=\"meta meta_function meta_function_clojure\">(<span class=\"storage storage_type storage_type_function storage_type_function_type storage_type_function_type_clojure\">defn</span> <span class=\"entity entity_name entity_name_function entity_name_function_clojure\"><span class=\"source source_symbol source_symbol_clojure\">convert-to-dollars</span></span> <span class=\"meta meta_function meta_function_body meta_function_body_clojure\"><span class=\"meta meta_function meta_function_parameters meta_function_parameters_vector meta_function_parameters_vector_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_begin punctuation_definition_vector_begin_clojure\">[</span><span class=\"variable variable_parameter variable_parameter_clojure\"><span class=\"source source_symbol source_symbol_clojure\">cents</span></span><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_end punctuation_definition_vector_end_clojure\">]</span></span><span class=\"meta meta_function meta_function_body meta_function_body_code meta_function_body_code_clojure\">
  <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"keyword keyword_operator keyword_operator_clojure\">/</span> <span class=\"source source_symbol source_symbol_clojure\">cents</span> <span class=\"constant constant_numeric constant_numeric_float constant_numeric_float_clojure\">100</span>)</span></span></span>)</span></span></pre>"]

[:p "By now, you should understand how to use Speclj to test your Clojure applications. I hope you enjoyed this tutorial. For additional information and a quick reference to all of Speclj's components, check out our <a href=\"/docs\">documentation</a> page."]
[:span {:id "lesson_nav"} [:a {:href "/tutorial/step6#ch9"} "<-- Exception Testing"]]
